function openerp_pos_invoice_ticket(instance, module){ //module is instance.point_of_sale
    var QWeb = instance.web.qweb,
    _t = instance.web._t;

    var PosModelSuper = module.PosModel
    module.PosModel = module.PosModel.extend({
        load_server_data: function(){
            var self = this;
            var loaded = PosModelSuper.prototype.load_server_data.call(this);
            loaded = loaded.then(function(){
                return self.fetch(
                    'res.company',
                    ['street', 'city', 'zip', 'state_id'],
                    [['id','=', self.user.company_id[0]]],
                    {}
                );
            }).then(function(companies){
                var company = companies[0];
                self.company.street = company.street;
                self.company.city = company.city;
                self.company.zip = company.zip;
                self.company.state_id = company.state_id;
                return self.fetch(
                    'res.partner',
                    ['employee'],
                    [['customer','=',true]],
                    {}
                );
            }).then(function(partners){
                $.each(partners, function(){
                    $.extend(self.db.get_partner_by_id(this.id) || {}, this)
                })
                return $.when()
            })
            return loaded;
        },
        push_order_and_invoice_receipt: function(order){
            var self = this;
            var invoiced = new $.Deferred(); 
            if(!order.get_client()){
                invoiced.reject('error-no-client');
                return invoiced;
            }
            else{
                var client = order.get_client()
                order.get('paymentLines').each(function(line){
                    var journal = line.cashregister.journal;
                    if (!journal.debt)
                        return;
                    var amount = line.get_amount();
                    client.debt += amount;
                });
            }

            var order_id = this.db.add_order(order.export_as_JSON());        

            this.flush_mutex.exec(function(){
                var done = new $.Deferred(); // holds the mutex

                // send the order to the server
                // we have a 30 seconds timeout on this push.
                // FIXME: if the server takes more than 30 seconds to accept the order,
                // the client will believe it wasn't successfully sent, and very bad
                // things will happen as a duplicate will be sent next time
                // so we must make sure the server detects and ignores duplicated orders

                var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});
                
                transfer.fail(function(){
                    invoiced.reject('error-transfer');
                    done.reject();
                });

                // on success, get the order id generated by the server
                transfer.pipe(function(order_server_id){    
                    invoiced.resolve(order_server_id);
                    done.resolve();
                });

                return done;

            });

            return invoiced;
        },
    });

	module.PaymentScreenWidget.include({
        show: function(){
            var self = this;
            this._super();

            if(this.pos.config.iface_invoicing){
            	this.add_action_button({
                    label: _t('Invoice'),
                    name: 'invoice_receipt',
                    icon: '/pos_invoice_ticket/static/src/img/icons/png48/invoice.png',
                    click: function(){  
                        self.validate_invoice_receipt();
                    },
                });
                /*
                this.add_action_button({
                    label: _t('Invoice'),
                    name: 'invoice_pdf',
                    icon: '/pos_invoice_ticket/static/src/img/icons/png48/pdf.png',
                    click: function(){
                        self.validate_invoice_receipt({invoice: true});
                    },
                });
                */
            }
            this.update_payment_summary();

        },
        update_payment_summary: function() {
            var self = this;
            this._super();

            if(this.pos_widget.action_bar){
                if(this.pos_widget.action_bar.buttons && this.pos_widget.action_bar.buttons['invoice']){
                    this.pos_widget.action_bar.buttons['invoice'].$el.addClass('oe_hidden');
                    //this.pos_widget.action_bar.set_element_visible(invoice_button, false);
                    //alert(Object.getOwnPropertyNames(invoice_button));
                }
                this.pos_widget.action_bar.set_button_disabled('invoice_receipt', !this.is_paid());
                /*this.pos_widget.action_bar.set_button_disabled('invoice_pdf', !this.is_paid());*/
            }
        },
        validate_order: function(options) {
            var self = this;
            this._super(options);
            if(this.pos_widget.action_bar.buttons && this.pos_widget.action_bar.buttons['invoice']){
                    this.pos_widget.action_bar.buttons['invoice'].$el.addClass('oe_hidden');
            }
        },
        validate_invoice_receipt: function() {
            var self = this;

            var currentOrder = this.pos.get('selectedOrder');
            if(currentOrder.get('orderLines').models.length === 0){
                this.pos_widget.screen_selector.show_popup('error',{
                    'message': _t('Empty Order'),
                    'comment': _t('There must be at least one product in your order before it can be validated'),
                });
                return;
            }

            var plines = currentOrder.get('paymentLines').models;
            for (var i = 0; i < plines.length; i++) {
                if (plines[i].get_type() === 'bank' && plines[i].get_amount() < 0) {
                    this.pos_widget.screen_selector.show_popup('error',{
                        'message': _t('Negative Bank Payment'),
                        'comment': _t('You cannot have a negative amount in a Bank payment. Use a cash payment method to return money to the customer.'),
                    });
                    return;
                }
            }

            if(!this.is_paid()){
                return;
            }

            // The exact amount must be paid if there is no cash payment method defined.
            if (Math.abs(currentOrder.getTotalTaxIncluded() - currentOrder.getPaidTotal()) > 0.00001) {
                var cash = false;
                for (var i = 0; i < this.pos.cashregisters.length; i++) {
                    cash = cash || (this.pos.cashregisters[i].journal.type === 'cash');
                }
                if (!cash) {
                    this.pos_widget.screen_selector.show_popup('error',{
                        message: _t('Cannot return change without a cash payment method'),
                        comment: _t('There is no cash payment method available in this point of sale to handle the change.\n\n Please pay the exact amount or add a cash payment method in the point of sale configuration'),
                    });
                    return;
                }
            }

            if (this.pos.config.iface_cashdrawer) {
                this.pos.proxy.open_cashbox();
            }

            // deactivate the validation button while we try to send the order
            this.pos_widget.action_bar.set_button_disabled('validation',true);
            /*this.pos_widget.action_bar.set_button_disabled('invoice_pdf',true);*/
            this.pos_widget.action_bar.set_button_disabled('invoice_receipt',true);

            var invoiced = this.pos.push_order_and_invoice_receipt(currentOrder);

            invoiced.fail(function(error){
                if(error === 'error-no-client'){
                    self.pos_widget.screen_selector.show_popup('error',{
                        message: _t('An anonymous order cannot be invoiced'),
                        comment: _t('Please select a client for this order. This can be done by clicking the order tab'),
                    });
                }else{
                    self.pos_widget.screen_selector.show_popup('error',{
                        message: _t('The order could not be sent'),
                        comment: _t('Check your internet connection and try again.'),
                    });
                }
                self.pos_widget.action_bar.set_button_disabled('validation',false);
                /*self.pos_widget.action_bar.set_button_disabled('invoice_pdf',false);*/
                self.pos_widget.action_bar.set_button_disabled('invoice_receipt',false);
            });

            invoiced.done(function(order_server_id){

                // load invoice related to order
                new instance.web.Model('pos.order')
                    .query(['invoice_id'])
                    .filter([['id','in',order_server_id]])
                    .first({'timeout':3000, 'shadow': true})
                    .then(function(result){
                        // update the currently created invoice in current order
                        currentOrder.set_invoice({id: result.invoice_id[0], name: result.invoice_id[1], display_name: result.invoice_id[1].split(" ")[0]});
                        if(self.pos.config.iface_print_via_proxy){
                            var receipt = currentOrder.export_for_printing();
                            self.pos.proxy.print_receipt(QWeb.render('XmlInvoiceReceipt',{
                                receipt: receipt, widget: self,
                            }));
                            self.pos.get('selectedOrder').destroy();    //finish order and go back to scan screen
                        }else{
                            self.pos_widget.receipt_screen.invoice_receipt = true;
                            self.pos_widget.screen_selector.set_current_screen('receipt');
                            self.pos_widget.receipt_screen.invoice_receipt = false;
                        }
                    });
            });

            // hide onscreen (iOS) keyboard 
            setTimeout(function(){
                document.activeElement.blur();
                $("input").blur();
            },250);
        },
    });

    module.ReceiptScreenWidget.include({
        refresh: function() {
            if(this.invoice_receipt){
                var order = this.pos.get('selectedOrder');
                $('.pos-receipt-container', this.$el).html(QWeb.render('PosInvoiceTicket',{
                    widget:this,
                    order: order,
                    orderlines: order.get('orderLines').models,
                    paymentlines: order.get('paymentLines').models,
                }));
            }else{
                this._super();
            }
        },
    });

    var OrderSuper = module.Order;
    module.Order = module.Order.extend({
        initialize: function(options){
            var self = this;
            options = options || {}
            OrderSuper.prototype.initialize.apply(this, arguments);
            this.set({
                invoice: null,
            });
        },
        // the invoice related to the current order.
        set_invoice: function(invoice){
            this.set('invoice', invoice);
        },
        get_invoice: function(){
            return this.get('invoice');
        },
        get_invoice_name: function(){
            var invoice = this.get('invoice');
            return invoice ? invoice.display_name : "";
        },
        is_debt: function(){
            var isDebt = false
            var lines = this.get('paymentLines').models;
            for (var i = 0; i < lines.length; i++) {
                if (lines[i].cashregister.journal.debt) {
                    isDebt = true;
                    break;
                }
            }
            return isDebt;
        },
        export_for_printing:function(){
            var res = OrderSuper.prototype.export_for_printing.call(this);
            var company = this.pos.company;
            var client  = this.get('client');
            res.company.street = company.street;
            res.company.city = company.city;
            res.company.zip = company.zip;
            res.company.state_id = company.state_id;
            res.company.country_id = company.country_id;
            res.company.contact_address = '' + (company.zip?company.zip + ' ' : '') + (company.street?company.street + ' ' : '') + (company.city?company.city +' ' : '') + (company.country_id?company.country_id[1] +' ' : '') ;
            res.client_address = null;
            res.client_phone = null;
            res.client_employee = false;
            if (client){     
                res.client_address = '' + (client.zip?client.zip + ' ' : '') + (client.street?client.street + ' ' : '') + (client.city?client.city +' ' : '') + (client.country_id?client.country_id[1] +' ' : '') ;
                res.client_phone = client.phone? client.phone : 'n/a';
                res.client_employee = client.employee;
            }
            res.invoice_id = this.get_invoice() ? this.get_invoice().id : false;
            res.invoice_name = this.get_invoice_name();
            res.pay_debt = this.is_debt();
            return res;
        },
    });

    var OrderlineSuper = module.Orderline;
    module.Orderline = module.Orderline.extend({
        export_for_printing:function(){
            var res = OrderlineSuper.prototype.export_for_printing.call(this);
            var taxes = this.get_applicable_taxes();
            res.taxes = taxes;
            return res;
        },
    });

}
